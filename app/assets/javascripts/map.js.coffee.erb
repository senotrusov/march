
 # Copyright 2012 Stanislav Senotrusov <stan@senotrusov.com>
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
 # You may obtain a copy of the License at
 #
 #     http://www.apache.org/licenses/LICENSE-2.0
 #
 # Unless required by applicable law or agreed to in writing, software
 # distributed under the License is distributed on an "AS IS" BASIS,
 # WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 # See the License for the specific language governing permissions and
 # limitations under the License.


L.Icon.Default.imagePath = '/assets';


parseLatLng = (string) ->
  if match = string.replace(/[^-\d,\.\s]/g , ' ').replace(/\s*[,\.]\s*/g, '.').replace(/-\s*/g, '-').match(/^\s*(-?\d+(?:\.\d+)?)\s+(-?\d+(?:\.\d+)?)\s*$/)
    if (lat = parseFloat(match[1])) and (lng = parseFloat(match[2]))
      new L.LatLng lat, lng


# TODO: Remove handler on map deletion? Does that handler prevents deleted map from being garbage collected?
# TODO: Test on touchscreen devices
scrollDisabler = (map) ->
  zoom = map.scrollWheelZoom
  fade = 0

  $(window).scroll ->
    fade += 1
    zoom.disable() if zoom.enabled()

    setTimeout (->
      fade -= 1
      zoom.enable() if fade == 0
      ), 750


contructMap = (placeholder, options = {}) ->

  map = new L.Map placeholder, options
  osm = new L.TileLayer "<%= Geo.config[:url] %>",
    minZoom: <%= Geo.config[:min_zoom] %>,
    maxZoom: <%= Geo.config[:max_zoom] %>,
    attribution: "<%= Geo.config[:attribution] %>"

  map.addLayer osm
  map.attributionControl.setPrefix ''

  scrollDisabler(map)

  map


$.fn.initMap = ->
  this.find('.map').each ->
    container = $(this)
    center = new L.LatLng(container.attr('data-lat'), container.attr('data-lng'))
    zoom = container.attr('data-zoom')

    map = contructMap(this, zoomControl: false)
    map.setView center, zoom

    marker = new L.Marker(center)
    map.addLayer marker

  .end()
  

$.fn.initLocationInput = ->
  this.find('input[name*="[location]"]').each ->
    input = $(this)
    zoomInput = input.closest('table').find('input[name*="[zoom]"]')
    locateButton = input.closest('table').find('.button.locate')

    callCreateMapInput = (forceLocate) ->
      createMapInput input, zoomInput, locateButton, forceLocate

    forceLocate = (input.attr('data-force-locate') == 'true')

    if input.val().match(/\S/) || input.attr('data-show-map') == 'true'
      callCreateMapInput(forceLocate)
    else
      input.one 'click', -> callCreateMapInput(forceLocate)
      zoomInput.one 'click', -> callCreateMapInput(forceLocate)
      locateButton.one 'click', -> callCreateMapInput(true)

  .end()


createMapInput = (input, zoomInput, locateButton, forceLocate) ->

  input.add(zoomInput).add(locateButton).off('click')

  container = $('<div/>', 'class': 'map_input').insertBefore(input.closest('table'))

  map = contructMap(container[0], zoomControl: true)
  marker = L.marker()
  circle = L.circle(undefined, undefined, fillOpacity: 0.1, clickable: false)

  highlightError = ->
    input.parent().addClass('field_with_errors')

  clearError = ->
    input.parent().removeClass('field_with_errors')

  setMarker = (latlng) ->
    marker.setLatLng(latlng)
    unless map.hasLayer(marker)
      marker.addTo(map)
      marker.dragging.enable()

  removeMarker = ->
    map.removeLayer(marker) if map.hasLayer(marker)

  parseInput = (clearErrorOnEmpty = true, onInvalidInput = false) ->
    if latlng = parseLatLng(input.val())
      map.setView(latlng, parseInt(zoomInput.val()) || (<%= Geo.config[:default_zoom] %>))
      setMarker(latlng)
      clearError()

    else if input.val().match(/^\s*$/)
      removeMarker()
      clearError() if clearErrorOnEmpty
      onInvalidInput(true) if onInvalidInput

    else
      removeMarker()
      highlightError()
      onInvalidInput(false) if onInvalidInput

  updateInput = ->
    if map.hasLayer(marker)
      location = marker.getLatLng()
      location = new L.LatLng(location.lat, location.lng) # TODO: report, getLatLng should return wrapped latlng

      # http://gis.stackexchange.com/questions/8650/how-to-measure-the-accuracy-of-latitude-and-longitude
      input.val("#{location.lat.toFixed(5)} #{location.lng.toFixed(5)}")
      clearError()

  locate = ->
    map.locate(setView: true, maxZoom: 16)


  input.on 'keyup paste cut change', ->
    nextTick ->
      parseInput()

  map.on 'zoomend', ->
    zoomInput.val(map.getZoom())

  marker.on 'dragend', ->
    updateInput()

  map.on 'click', (e) ->
    setMarker(e.latlng)
    updateInput()

  map.on 'locationfound', (e) ->
    circle.setLatLng(e.latlng)
    circle.setRadius(e.accuracy / 2)
    circle.addTo(map) unless map.hasLayer(circle)
      
    setMarker(e.latlng)
    updateInput()

  locateButton.on 'click', ->
    locate()

  
  parseInput false, (inputIsEmpty) ->
    if inputIsEmpty && forceLocate
      locate()
    else
      map.fitWorld()
